from typing import Tuple

import geopandas as gpd
import networkx as nx
import pandas as pd
from shapely.geometry import LineString


def split_edges(
    edges_gdf: gpd.GeoDataFrame,
    nodes_gdf: gpd.GeoDataFrame,
) -> Tuple[gpd.GeoDataFrame, gpd.GeoDataFrame]:
    """
    Split edges into smaller edges with only two nodes. The function returns
    a new edges GeoDataFrame and a new nodes GeoDataFrame. The new ids are
    generated by incrementing the maximum id in the nodes GeoDataFrame.
    :param edges_gdf: The edges GeoDataFrame
    :param nodes_gdf: The nodes GeoDataFrame
    :return: A tuple with the new edges and nodes GeoDataFrames
    """
    new_nodes = []
    new_edges = []
    base_id = nodes_gdf["node_id"].max() + 1

    for _, edge in edges_gdf.iterrows():
        geometry = edge["geometry"]
        if isinstance(geometry, LineString):
            coords = list(geometry.coords)
            prev_node = edge["u"]

            for i in range(1, len(coords)):
                new_node = {
                    "node_id": base_id,
                    "x": coords[i][0],
                    "y": coords[i][1],
                }
                new_nodes.append(new_node)

                new_edges.append(
                    {
                        "u": prev_node,
                        "v": base_id,
                        "geometry": LineString([coords[i - 1], coords[i]]),
                    }
                )
                prev_node = base_id
                base_id += 1

            # Add the last edge from the last new node to the original end node
            new_edges.append(
                {
                    "u": prev_node,
                    "v": edge["v"],
                    "geometry": LineString([coords[-2], coords[-1]]),
                }
            )

    return gpd.GeoDataFrame(new_edges), gpd.GeoDataFrame(
        pd.concat([nodes_gdf, gpd.GeoDataFrame(new_nodes)], ignore_index=True)
    )


def bounding_box_from_graph(graph: nx.Graph) -> Tuple[float, float, float, float]:
    """
    Compute the bounding box of a graph.
    :param graph: A NetworkX graph
    :return: A tuple with the bounding box coordinates (min_x, min_y, max_x, max_y)
    """
    min_x, min_y, max_x, max_y = (
        float("inf"),
        float("inf"),
        float("-inf"),
        float("-inf"),
    )
    for node in graph.nodes(data=True):
        x, y = node[1]["x"], node[1]["y"]
        min_x = min(min_x, x)
        min_y = min(min_y, y)
        max_x = max(max_x, x)
        max_y = max(max_y, y)

    return min_x, min_y, max_x, max_y


def reduce_bounding_box(
    graph: nx.Graph, factor: float = 0.1
) -> Tuple[float, float, float, float]:
    """
    Reduce the bounding box of a graph by a factor.
    :param graph: A NetworkX graph
    :param factor: The factor to reduce the bounding box
    :return: A tuple with the reduced bounding box coordinates (min_x, min_y, max_x, max_y)
    """
    min_x, min_y, max_x, max_y = bounding_box_from_graph(graph)
    width = max_x - min_x
    height = max_y - min_y
    min_x += width * factor
    min_y += height * factor
    max_x -= width * factor
    max_y -= height * factor

    return min_x, min_y, max_x, max_y


def crop_graph(
    graph: nx.Graph, min_x: float, min_y: float, max_x: float, max_y: float
) -> nx.Graph:
    """
    Crop a graph to a bounding box.
    :param graph: A NetworkX graph
    :param min_x: The minimum x coordinate
    :param min_y: The minimum y coordinate
    :param max_x: The maximum x coordinate
    :param max_y: The maximum y coordinate
    :return: A new NetworkX graph
    """
    cropped_graph = nx.Graph()
    for node in graph.nodes(data=True):
        x, y = node[1]["x"], node[1]["y"]
        if min_x <= x <= max_x and min_y <= y <= max_y:
            cropped_graph.add_node(node[0], x=x, y=y)

    for edge in graph.edges(data=True):
        u, v = edge[0], edge[1]
        if u in cropped_graph and v in cropped_graph:
            cropped_graph.add_edge(u, v)

    return cropped_graph
